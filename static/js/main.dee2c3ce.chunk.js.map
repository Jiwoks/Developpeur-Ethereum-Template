{"version":3,"sources":["helpers/contract.js","stores/wallet.js","stores/contract.js","helpers/wallet.js","components/Wallet.jsx","components/WorkflowStatus.jsx","components/UserStatus.jsx","pages/RegisteringVoters.jsx","pages/RegisteringProposals.jsx","pages/VotingSession.jsx","components/ResetStatus.jsx","components/NextStatus.jsx","components/VotingSessionId.jsx","pages/ProposalsRegistrationEnded.jsx","pages/NotConnected.jsx","pages/VotingSessionEnded.jsx","pages/VotesTallied.jsx","components/Writer.jsx","stores/app.js","components/Settings.jsx","pages/Main.jsx","helpers/web3.js","App.js","serviceWorker.js","index.js"],"names":["contractInstance","store","create","set","web3","ready","connected","address","isVoter","isOwner","hasVoted","votedProposalId","proposals","setWeb3","connect","state","disconnect","resetVote","addProposals","addProposal","proposal","newProposals","push","workflowStatus","votingSessionId","voters","log","noContractSet","addVoters","addVoter","voter","newVoters","resetContract","loadContract","web3Provider","a","eth","net","getId","networkId","deployedNetwork","votingContract","networks","contractStore","setState","Contract","abi","getWorkflowStatus","getVotingSessionId","events","allEvents","err","event","console","warn","triggerEvent","subscribeEvent","returnValues","newStatus","walletStore","getState","Web3","utils","toChecksumAddress","voterAddress","getProposal","proposalId","description","getPermissions","getVoter","isRegistered","sessionId","methods","owner","call","setVoter","send","from","vote","nextStatus","resetStatus","reset","getVoters","getPastEvents","fromBlock","toBlock","filter","voterEvents","getProposals","addressFrom","proposalsArray","proposalEvent","id","voteCount","getWinner","winner","subscriptions","eventName","callback","undefined","Object","values","evt","storeConnect","getAccounts","accounts","Array","isArray","Wallet","props","handleClick","classes","textButton","substr","onClick","className","join","WorkflowStatus","map","status","key","toString","getWorkflowStatusName","UserStatus","RegisteringVoters","useState","getInput","setInput","getDisabled","setDisabled","useEffect","handleAddVoter","isAddressValid","test","value","onChange","e","target","disabled","length","index","RegisteringProposals","handleAddProposal","trim","class","VotingSession","setProposals","ResetStatus","NextStatus","VotingSessionId","ProposalsRegistrationEnded","NotConnected","VotingSessionEnded","VotesTallied","intervalIdle","intervalWriting","lastProposal","winningProposal","setWinningProposal","sound","effects","setSound","setEffects","audio","Audio","loop","Writer","content","setContent","appStore","data","clearInterval","window","setInterval","play","pause","currentTime","lastPointer","Settings","effectsEnabled","Cookies","get","soundEnabled","toggle","type","document","getElementsByTagName","classList","add","remove","Main","displayWorkflowStatus","displayNextStatus","displayResetStatus","allowedAccess","href","accountChanged","Promise","resolve","reject","addEventListener","ethereum","enable","on","provider","providers","HttpProvider","App","then","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.dee2c3ce.chunk.js","sourcesContent":["import votingContract from '../contracts/Voting.json';\nimport contractStore from '../stores/contract';\nimport walletStore from '../stores/wallet';\nimport Web3 from 'web3';\n\nlet contractInstance;\n\n/**\n * Load the contract with our web3 provider\n *\n * @param web3Provider\n * @return {Promise<void>}\n */\nasync function loadContract(web3Provider) {\n    const networkId = await web3Provider.eth.net.getId();\n    const deployedNetwork = votingContract.networks[networkId];\n\n    if (!deployedNetwork || !deployedNetwork.address) {\n        contractStore.setState({ noContractSet: true });\n        return;\n    }\n\n    contractInstance = new web3Provider.eth.Contract(\n        votingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n    );\n\n    // As we have the contract we can already get the workflow status\n    const workflowStatus = await getWorkflowStatus();\n    const votingSessionId = await getVotingSessionId();\n\n    contractInstance.events.allEvents(\n        {},\n        (err, event) => {\n            if (err) {\n                return console.warn(err);\n            }\n            triggerEvent(event)\n        }\n    );\n\n    subscribeEvent('WorkflowStatusChange', (event) => {\n        contractStore.setState({ workflowStatus: event.returnValues.newStatus, votingSessionId: event.returnValues.votingSessionId });\n        if (event.returnValues.newStatus === '0') {\n            // The voting session has been reset\n            walletStore.getState().resetVote();\n            contractStore.getState().resetContract();\n        }\n    });\n\n    subscribeEvent('*', (event) => {\n        contractStore.setState({log: event.event });\n    });\n\n    subscribeEvent('VoterRegistered', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voterAddress) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ isVoter: true });\n        }\n\n        contractStore.getState().addVoter({\n            address: event.returnValues.voterAddress\n        });\n    });\n\n    subscribeEvent('ProposalRegistered', async (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            const proposal = await getProposal(event.returnValues.proposalId);\n\n            walletStore.getState().addProposal({\n                proposalId: event.returnValues.proposalId,\n                description: proposal.description,\n            });\n        }\n    });\n\n    subscribeEvent('Voted', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ hasVoted: true, votedProposalId: event.returnValues.proposalId });\n        }\n    });\n\n    // Save the state\n    contractStore.setState({ ready: true, workflowStatus, votingSessionId, address: deployedNetwork.address });\n}\n\n/**\n * Get the permissions for an address\n * an store it inside contract store\n *\n * @todo: rename this function as we do more than just getting permissions\n *\n * @param address\n * @return {Promise<*[]>}\n */\nasync function getPermissions(address) {\n    if (!contractInstance) {\n        return;\n    }\n    const voter = await getVoter(address);\n\n    if (voter.isRegistered && voter.sessionId === contractStore.getState().votingSessionId) {\n        walletStore.setState({ isVoter: true, hasVoted: voter.hasVoted, votedProposalId: voter.votedProposalId });\n    }\n\n    const owner = await contractInstance.methods.owner().call();\n\n    if (Web3.utils.toChecksumAddress(owner) === Web3.utils.toChecksumAddress(address)) {\n        walletStore.setState({ isOwner: true });\n    }\n}\n\n/**\n * Get a voter from contract\n *\n * @param address\n * @return {Promise<{hasVoted: boolean, isRegistered: boolean, votedProposalId}>}\n */\nasync function getVoter(address) {\n    const voter = await contractInstance.methods.voters(address).call();\n\n    return (({ isRegistered, hasVoted, votedProposalId, sessionId }) => ({ isRegistered, hasVoted, votedProposalId, sessionId }))(voter);\n}\n\n/**\n * Get the workflow status of the voting session\n *\n * @return {Promise<null|*>}\n */\nasync function getWorkflowStatus() {\n    if (!contractInstance) {\n        return null;\n    }\n    return await contractInstance.methods.workflowStatus().call();\n}\n\n/**\n * Get the voting session identifier\n *\n * @return {Promise<null|*>}\n */\nasync function getVotingSessionId() {\n    if (!contractInstance) {\n        return null;\n    }\n    return await contractInstance.methods.votingSessionId().call();\n}\n\n/**\n * Save a voter on the blockchain\n *\n * @param address\n * @return {Promise<*>}\n */\nasync function setVoter(address) {\n    return await contractInstance.methods.addVoter(address).send({from: walletStore.getState().address});\n}\n\n/**\n * Vote for a proposal\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function vote(proposalId) {\n    return await contractInstance.methods.vote(proposalId).send({from: walletStore.getState().address});\n}\n\n/**\n * Change to the next status\n *\n * @return {Promise<*>}\n */\nasync function nextStatus() {\n    return await contractInstance.methods.nextStatus().send({from: walletStore.getState().address});\n}\n\n/**\n * Add a new proposal\n *\n * @param proposal\n * @return {Promise<*>}\n */\nasync function addProposal(proposal) {\n    return await contractInstance.methods.addProposal(proposal).send({from: walletStore.getState().address});\n}\n\n/**\n * Get a proposal\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function getProposal(proposalId) {\n    return await contractInstance.methods.proposals(proposalId).call();\n}\n\n/**\n * Reset contract\n * @returns {Promise<*>}\n */\nasync function resetStatus() {\n    return await contractInstance.methods.reset().send({from: walletStore.getState().address});\n}\n\n/**\n * Return the human readable text for a workflow status\n *\n * @param workflowStatus\n * @return {string}\n */\nfunction getWorkflowStatusName(workflowStatus) {\n    workflowStatus = workflowStatus.toString();\n    let status;\n\n    switch (workflowStatus) {\n        case '0':\n            status = 'Registering voters'\n            break;\n        case '1':\n            status = 'Proposal registration'\n            break;\n        case '2':\n            status = 'Proposal registration has ended'\n            break;\n        case '3':\n            status = 'Voting session'\n            break;\n        case '4':\n            status = 'Voting session has ended'\n            break;\n        case '5':\n            status = 'Votes tallied'\n            break;\n        default:\n            status = 'Not a valid status'\n    }\n\n    return status;\n}\n\n/**\n * Retrieve all voters for the current session\n *\n * @return {Promise<*[]>}\n */\nasync function getVoters() {\n    const voterEvents = await contractInstance.getPastEvents('VoterRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n        filter: {\n            votingSessionId: contractStore.getState().votingSessionId\n        },\n    });\n\n    const voters = [];\n\n    for (const voter of voterEvents) {\n        voters.push({\n            address: voter.returnValues.voterAddress,\n        });\n    }\n\n    return voters;\n}\n\n/**\n * Retrieve all proposals for the current session\n * Can be filtered an address\n *\n * @param addressFrom\n * @return {Promise<*[]>}\n */\nasync function getProposals(addressFrom = null) {\n    const filter = {\n        votingSessionId:  contractStore.getState().votingSessionId\n    };\n\n    if (addressFrom) {\n        filter.address = addressFrom;\n    }\n\n    const proposals = await contractInstance.getPastEvents('ProposalRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n        filter,\n    });\n\n    const proposalsArray = [];\n\n    for (const proposalEvent of proposals) {\n        const proposal = await getProposal(proposalEvent.returnValues.proposalId);\n        proposalsArray.push({\n            id: proposalEvent.returnValues.proposalId,\n            description: proposal.description,\n            voteCount: proposal.voteCount,\n        });\n    }\n\n    return proposalsArray;\n}\n\n/**\n * Return the winning proposal\n *\n * @return {Promise<{description: *, proposalId: *}>}\n */\nasync function getWinner() {\n    const winner = await contractInstance.methods.getWinner().call();\n\n    return {proposalId: winner.proposalId, description: winner.description, voteCount: winner.voteCount};\n}\n\nconst subscriptions = {};\nfunction subscribeEvent(eventName, callback) {\n    if (subscriptions[eventName] === undefined) {\n        subscriptions[eventName] = [];\n    }\n    subscriptions[eventName].push(callback);\n}\n\nfunction triggerEvent(event) {\n    if (subscriptions[event.event] !== undefined) {\n        for (const evt of Object.values(subscriptions[event.event])) {\n            evt(event);\n        }\n    }\n    if (subscriptions['*'] !== undefined) {\n        for (const evt of Object.values(subscriptions['*'])) {\n            evt(event);\n        }\n    }\n}\n\nexport {\n    loadContract,\n    getWorkflowStatus,\n    getPermissions,\n    getVoters,\n    setVoter,\n    vote,\n    getWorkflowStatusName,\n    nextStatus,\n    addProposal,\n    getProposals,\n    getWinner,\n    resetStatus,\n    subscribeEvent\n};\n","/**\n * We store here all data related to the wallet and web3 connection\n */\nimport create from 'zustand';\n\nconst store = create(set => ({\n    web3: null, // Web3 provider\n    ready: false, // True when web3 provider is ready\n    connected: false,\n    address: null,\n    isVoter: false,\n    isOwner: false,\n    hasVoted: false,\n    votedProposalId: null,\n    proposals: [],\n    setWeb3: (web3) => set({web3}),\n    connect: (address) => set(state => ({ connected: true, address })),\n    disconnect: () => set({ connected: false, address: null, isVoter: false, isOwner: false, hasVoted: false }),\n    resetVote: () => set({ isVoter: false, hasVoted: false }),\n    addProposals: (proposals) => set({ proposals }),\n    addProposal: (proposal) => set(state => {\n        const newProposals = [...state.proposals];\n        newProposals.push(proposal);\n        return {proposals: newProposals}\n    }),\n}));\n\nexport default store;\n","/**\n * We store here all the data related to the contract\n * Events, current state, ...\n */\nimport create from 'zustand';\n\nconst store = create(set => ({\n    ready: false,\n    address: null,\n    workflowStatus: null,\n    votingSessionId: null,\n    voters: [],\n    log: null,\n    noContractSet: null,\n    addVoters: (voters) => set({ voters }),\n    addVoter: (voter) => set(state => {\n        const newVoters = [...state.voters];\n        newVoters.push(voter);\n        return {voters: newVoters}\n    }),\n    resetContract: () => set({ voters: [] }),\n}));\n\nexport default store;\n","import {getPermissions} from \"./contract\";\nimport walletStore from \"../stores/wallet\";\n\nasync function connect() {\n    const storeConnect = walletStore.getState().connect;\n    const web3 = walletStore.getState().web3;\n\n    const accounts = await web3.eth.getAccounts();\n\n    if (Array.isArray(accounts) && accounts[0]) {\n        storeConnect(accounts[0]);\n        await getPermissions(accounts[0]);\n        return true;\n    }\n\n    return false;\n}\n\nfunction disconnect() {\n    walletStore.getState().disconnect();\n}\n\nexport {connect, disconnect}\n","import React from 'react';\nimport walletStore from '../stores/wallet';\nimport {connect, disconnect} from \"../helpers/wallet\";\n\nfunction Wallet(props) {\n    // Load the data from store\n    const { ready, connected, address } = walletStore(state => ({web3: state.web3, ready: state.ready, connected: state.connected, address: state.address}));\n\n    const handleClick = async () => {\n        if (!ready) {\n            // Web3 must be ready before any interaction\n            return;\n        }\n\n        if (!connected) {\n            await connect();\n        } else {\n            // We want to disconnect the current account\n            await disconnect();\n        }\n    }\n\n    const classes = ['btn-wallet', 'btn'];\n    let textButton = 'Loading';\n    if (ready && !connected) {\n        textButton = 'Connect'\n    } else if (connected) {\n        textButton = address.substr(0, 6) + '....' + address.substr(-4);\n        classes.push('btn-wallet-connected');\n    }\n\n    return (\n        <button id=\"wallet\" onClick={handleClick}  className={classes.join(' ')}>\n            {textButton}\n        </button>\n    );\n}\n\nexport default Wallet;\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {getWorkflowStatusName} from \"../helpers/contract\";\n\nfunction WorkflowStatus(props) {\n\n    const {ready, workflowStatus} = contractStore(state => ({ready: state.ready, workflowStatus: state.workflowStatus}));\n\n    if (!ready) {\n        // Status not yet initialized\n        return <></>;\n    }\n\n    return (\n        <div>\n            <h3>Current status :</h3>\n            {[0,1,2,3,4,5].map((status)=>{\n                return (\n                    <div key={status}>\n                        [{workflowStatus === status.toString() ? 'x' : ' '}] {getWorkflowStatusName(status)}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nexport default WorkflowStatus;\n","import React from 'react';\nimport walletStore from \"../stores/wallet\";\n\nfunction UserStatus() {\n\n    const {isVoter, isOwner} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner }));\n\n    return (\n        <div>\n            <h3>Your permissions :</h3>\n            <div>Owner: {isOwner ? '[✓]' : '[ ]'}</div>\n\n            <div>Voter: {isVoter ? '[✓]' : '[ ]'}</div>\n        </div>\n    );\n}\n\nexport default UserStatus;\n","import React, {useEffect, useState} from 'react';\nimport {setVoter, getVoters} from \"../helpers/contract\";\nimport contractStore from \"../stores/contract\";\n\nfunction RegisteringVoters() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n\n    const {voters} = contractStore(state => ({ voters: state.voters }));\n    const addVoters = contractStore.getState().addVoters;\n\n    useEffect(() => {\n        (async () => {\n            addVoters(await getVoters());\n        })();\n    }, []);\n\n    const handleAddVoter = async () => {\n        await setVoter(getInput);\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setDisabled(!isAddressValid(e.target.value));\n        setInput(e.target.value);\n    }\n\n    const isAddressValid = (address) => {\n        if (typeof address !== 'string') {\n            return false;\n        }\n\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n    }\n\n    return (\n        <>\n            <h2>Add a voter</h2>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange} />\n            <button disabled={getDisabled} onClick={handleAddVoter}>Add voter</button>\n\n            {voters.length >0 &&\n                <>\n                    <h3>Voters whitelist</h3>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Address</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {voters.map((voter, index) =>\n                            <tr key={index}>\n                                <td>{index}</td>\n                                <td>{voter.address}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </>\n            }\n\n            {voters.length === 0 && <div>You don't have any voter registered yet</div>}\n        </>\n    )\n}\n\nexport default RegisteringVoters;\n\n","import React, {useEffect, useState} from 'react';\nimport {addProposal, getProposals} from \"../helpers/contract\";\nimport walletStore from \"../stores/wallet\";\n\nfunction RegisteringProposals() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n\n    const {address, proposals} = walletStore(state => ({ address: state.address, proposals: state.proposals }));\n    const addProposals = walletStore.getState().addProposals;\n\n    useEffect(() => {\n        (async () => {\n            addProposals(await getProposals(address));\n        })();\n    }, []);\n\n    const handleAddProposal = async () => {\n        await addProposal(getInput.trim());\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setInput(e.target.value);\n        setDisabled(e.target.value.trim() === '');\n    }\n\n    return (\n        <>\n            <h2>Registering proposals</h2>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange}/>\n            <button disabled={getDisabled} onClick={handleAddProposal}>Add proposal</button>\n\n            {proposals.length > 0 &&\n                <>\n                    <h3>Your proposals</h3>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Proposal</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {proposals.map((proposal, index) =>\n                            <tr key={index}>\n                                <td>{index}</td>\n                                <td>{proposal.description}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </>\n            }\n\n            {proposals.length === 0 && <div class=\"top-margin\">You don't have any proposal registered yet</div>}\n        </>\n    )\n}\n\nexport default RegisteringProposals;\n\n","import React, {useEffect, useState} from 'react';\nimport {getProposals, vote} from \"../helpers/contract\";\nimport walletStore from \"../stores/wallet\";\n\nfunction VotingSession() {\n    const [proposals, setProposals] = useState([]);\n\n    const {hasVoted, votedProposalId} = walletStore(state => ({ hasVoted: state.hasVoted, votedProposalId: state.votedProposalId }));\n\n    useEffect(() => {\n        (async () => {\n            setProposals(await getProposals());\n        })();\n    }, []);\n\n    const handleClick = async (proposalId) => {\n        await vote(proposalId);\n    }\n\n    return (\n        <>\n            <h2>Proposals available for vote</h2>\n            {<p>Your vote has been saved</p>}\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Proposition</th>\n                        <th>Vote</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {proposals.map((proposal) =>\n                    <tr key={proposal.id}>\n                        <td><span className=\"proposal-id\">{proposal.id}</span></td>\n                        <td>{proposal.description}</td>\n                        <td>\n                            {(hasVoted && votedProposalId === proposal.id) && '[x]'}\n                            {(hasVoted && votedProposalId !== proposal.id) && '[ ]'}\n                            {!hasVoted && <button onClick={() => handleClick(proposal.id)}>Vote</button>}\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nexport default VotingSession;\n\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {resetStatus} from \"../helpers/contract\";\n\nfunction ResetStatus() {\n    const handleClick = async () => {\n        await resetStatus();\n    }\n\n    return (\n        <button className=\"btn-status btn-reset\" onClick={handleClick}>\n            Reset contract\n        </button>\n    );\n}\n\nexport default ResetStatus;\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {getWorkflowStatusName, nextStatus} from \"../helpers/contract\";\n\nfunction NextStatus() {\n\n    const handleClick = async () => {\n        await nextStatus();\n    }\n\n    return (\n        <button className=\"btn-status\" onClick={handleClick}>\n            Next Status\n        </button>\n    );\n}\n\nexport default NextStatus;\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\n\nfunction VotingSessionId(props) {\n\n    const {ready, votingSessionId} = contractStore(state => ({ready: state.ready, votingSessionId: state.votingSessionId}));\n\n    if (!ready) {\n        // Status not yet initialized\n        return <></>;\n    }\n\n    return (\n        <div>\n            Voting Session number {votingSessionId}\n        </div>\n    );\n}\n\nexport default VotingSessionId;\n","import React, {useState} from 'react';\nimport {addProposal} from \"../helpers/contract\";\n\nfunction ProposalsRegistrationEnded() {\n\n\n    return (\n        <>\n            Proposal registration is finished.<br/>\n            Vote will be available soon.\n        </>\n    )\n}\n\nexport default ProposalsRegistrationEnded;\n\n","import React from 'react';\n\nfunction NotConnected() {\n\n    return (\n        <>\n            Please connect your wallet\n        </>\n    )\n}\n\nexport default NotConnected;\n\n","import React, {useEffect, useState} from 'react';\nimport {addProposal, getProposals, vote} from \"../helpers/contract\";\n\nfunction VotingSessionEnded() {\n\n    return (\n        <>\n            <p>Voting session has ended.</p>\n            <p>Thank you for your participation.</p>\n            <p>Result will be available shortly.</p>\n        </>\n    )\n}\n\nexport default VotingSessionEnded;\n\n","import React, {useEffect, useState} from 'react';\nimport {getWinner} from \"../helpers/contract\";\nimport contractStore from \"../stores/contract\";\n\nfunction VotesTallied() {\n    const [winningProposal, setWinningProposal] = useState(null);\n    const {votingSessionId} = contractStore(state => ({ready: state.ready, votingSessionId: state.votingSessionId}));\n\n    useEffect(() => {\n        (async () => {\n            setWinningProposal(await getWinner());\n        })();\n    }, []);\n\n    if (winningProposal === null) {\n        return <></>;\n    }\n\n    return (\n        <>\n            <h2>Winning proposal for vote session {votingSessionId}</h2>\n            <p>\n                Proposal #{winningProposal.proposalId} win with {winningProposal.voteCount} vote(s) :\n            </p>\n            <p><i>{winningProposal.description}</i></p>\n        </>\n    )\n}\n\nexport default VotesTallied;\n\n","import React, {useEffect, useState} from 'react';\nimport contractStore from \"../stores/contract\";\nimport appStore from \"../stores/app\";\n\nlet intervalIdle;\nlet intervalWriting\nlet lastProposal;\nconst audio = new Audio('sound.mp3');\naudio.loop = true;\n\nfunction Writer(props) {\n    const [content, setContent] = useState(null);\n\n    const {sound} = appStore(state => ({ sound: state.sound }));\n\n\n    useEffect(() => {\n        if (props.data === '' || props.data === null) {\n            return;\n        }\n\n        const intervalWritingTiming = 70;\n        const intervalIdleTiming = 600;\n        const pointer = '▓';\n        let index = 0;\n\n        clearInterval(intervalWriting);\n        clearInterval(intervalIdle);\n        intervalWriting = window.setInterval(() => {\n            if(sound) {\n                audio.play();\n            }\n            setContent(props.data.substr(0, index) + pointer);\n\n            if (index === props.data.length) {\n                lastProposal = props.data;\n                audio.pause();\n                audio.currentTime = 0;\n                contractStore.setState({log: null });\n                window.clearInterval(intervalWriting);\n                let lastPointer = '';\n                intervalIdle = window.setInterval(() => {\n                    if (lastPointer === '') {\n                        lastPointer = pointer;\n                    } else {\n                        lastPointer = '';\n                    }\n                    setContent(lastProposal + lastPointer);\n                }, intervalIdleTiming);\n            }\n            index++;\n        }, intervalWritingTiming);\n\n    }, [props.data]);\n\n    if (content === null) {\n        return (<></>);\n    }\n\n    return (\n        <>\n            {content}\n        </>\n    );\n}\n\nexport default Writer;\n","/**\n * We store here all data related to the wallet and web3 connection\n */\nimport create from 'zustand';\n\nconst store = create(set => ({\n    sound: true,\n    effects: true,\n    setSound: (sound) => set({sound}),\n    setEffects: (effects) => set({effects}),\n}));\n\nexport default store;\n","import React, {useEffect} from 'react';\nimport appStore from '../stores/app.js';\nimport Cookies from 'js-cookie';\n\n/**\n * Enable or disable visual effect\n *\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Settings() {\n    const {sound, effects} = appStore(state => ({ sound: state.sound, effects: state.effects}));\n    const {setSound, setEffects} = appStore(state => ({ setSound: state.setSound, setEffects: state.setEffects}));\n\n    useEffect(() => {\n        // fixme: This part should not be done here, but on top of the application\n        const effectsEnabled = Cookies.get('no-effects') === undefined;\n        const soundEnabled = Cookies.get('no-sound') === undefined;\n        toggle('effects', effectsEnabled);\n        setEffects(effectsEnabled);\n        toggle('sound', soundEnabled);\n        setSound(soundEnabled);\n    }, []);\n\n    const toggle = (type, value) => {\n        if (type === 'effects') {\n            if (value) {\n                document.getElementsByTagName('body')[0].classList.add('animated');\n            } else {\n                document.getElementsByTagName('body')[0].classList.remove('animated');\n            }\n            setEffects(value);\n        } else if (type === 'sound') {\n            setSound(value);\n        }\n\n        if (value) {\n            Cookies.remove('no-' + type);\n        } else {\n            Cookies.set('no-' + type, '1')\n        }\n\n    }\n\n    return (\n        <div id=\"settings\">\n            <h3>Settings</h3>\n            <a onClick={() => toggle('effects', !effects)} className=\"setting-btn\">Visual effect <span>{effects ? '[x]' : '[ ]'}</span></a>\n            <a onClick={() => toggle('sound', !sound)} className=\"setting-btn\">Sound <span>{sound ? '[x]' : '[ ]'}</span></a>\n        </div>\n    );\n}\n\nexport default Settings;\n","import React from 'react';\nimport Wallet from \"../components/Wallet\";\nimport WorkflowStatus from \"../components/WorkflowStatus\";\nimport UserStatus from \"../components/UserStatus\";\nimport walletStore from \"../stores/wallet\";\nimport contractStore from \"../stores/contract\";\nimport RegisteringVoters from \"./RegisteringVoters\";\nimport RegisteringProposals from \"./RegisteringProposals\";\nimport VotingSession from \"./VotingSession\";\nimport ResetStatus from \"../components/ResetStatus\";\nimport NextStatus from \"../components/NextStatus\";\nimport VotingSessionId from \"../components/VotingSessionId\";\nimport ProposalsRegistrationEnded from \"./ProposalsRegistrationEnded\";\nimport NotConnected from \"./NotConnected\";\nimport VotingSessionEnded from \"./VotingSessionEnded\";\nimport VotesTallied from \"./VotesTallied\";\nimport Writer from \"../components/Writer\";\nimport Settings from \"../components/Settings\";\n\nfunction Main() {\n    const {isVoter, isOwner, connected} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner, connected: state.connected }));\n    const {noContractSet, workflowStatus, address, log} = contractStore(state => ({ noContractSet: state.noContractSet, workflowStatus: state.workflowStatus, address: state.address, log: state.log}));\n\n    // We are on the wrong network, or contract has not been published yet\n    if (noContractSet) {\n        return (\n            <>\n                <div id=\"main\">\n                    No contract set\n                </div>\n            </>\n        );\n    }\n\n    let displayWorkflowStatus = false, displayNextStatus = false, displayResetStatus = false, displayPermissions = false, allowedAccess = false;\n\n    if (isOwner || isVoter) {\n        displayWorkflowStatus = isOwner || isVoter;\n        allowedAccess = true;\n    }\n\n    if (isOwner && workflowStatus !== '5') {\n        displayNextStatus = true;\n    }\n    if (isOwner && workflowStatus === '5') {\n        displayResetStatus = true;\n    }\n\n    return (\n        <>\n            <div id=\"header\">\n                <div>\n                    <VotingSessionId />\n                    <Writer data={log} />\n                </div>\n                <div className=\"side-right\">\n                    <Wallet />\n                </div>\n\n            </div>\n\n            <div id=\"main\">\n                {connected && allowedAccess &&\n                    <div id=\"sidebars\">\n                        {(displayWorkflowStatus || displayNextStatus || displayResetStatus) &&\n                            <div className=\"sidebar\">\n                                {displayWorkflowStatus && <WorkflowStatus/>}\n                                {displayNextStatus && <NextStatus/>}\n                                {displayResetStatus && <ResetStatus/>}\n                            </div>\n                        }\n                        <div className=\"sidebar\">\n                            <UserStatus/>\n                        </div>\n                        <div className=\"sidebar\">\n                            <Settings />\n                        </div>\n                    </div>\n                }\n                <div id=\"content\">\n                    {!allowedAccess &&\n                        <div className=\"top-margin\">\n                            You are not allowed to access the application.\n                        </div>\n                    }\n                    {allowedAccess &&\n                        <div>\n                            {!connected && <NotConnected/>}\n                            {(isOwner && workflowStatus === '0') && <RegisteringVoters/>}\n                            {(isVoter && workflowStatus === '1') && <RegisteringProposals/>}\n                            {(isVoter && workflowStatus === '2') && <ProposalsRegistrationEnded/>}\n                            {(isVoter && workflowStatus === '3') && <VotingSession/>}\n                            {(isVoter && workflowStatus === '4') && <VotingSessionEnded/>}\n                            {(isVoter && workflowStatus === '5') && <VotesTallied/>}\n                        </div>\n                    }\n                </div>\n\n            </div>\n            <div id=\"footer\"><a target=\"_blank\" href={'https://ropsten.etherscan.io/address/' + address}>Contract address : {address}</a></div>\n        </>\n    )\n}\n\nexport default Main;\n","import Web3 from \"web3\";\n\nconst web3 = (accountChanged = () => {}) =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n\n          window.ethereum.on('accountsChanged', accountChanged)\n\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default web3;\n","import React, {useEffect} from 'react';\nimport Main from './pages/Main'\nimport web3 from \"./helpers/web3\";\nimport {loadContract} from \"./helpers/contract\";\nimport walletStore from \"./stores/wallet\";\nimport './assets/css/normalize.css';\nimport './assets/css/app.css';\nimport {connect, disconnect} from \"./helpers/wallet\";\n\nfunction App() {\n  useEffect(() => {\n    web3(async () => {\n      await disconnect();\n      await connect();\n    }).then(async (web3Provider) => {\n      walletStore.setState({ web3: web3Provider, ready: true });\n\n      // Load the contract\n      await loadContract(web3Provider);\n\n      await connect();\n    });\n  }, []);\n\n  return <Main />;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}