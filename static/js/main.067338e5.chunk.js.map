{"version":3,"sources":["helpers/contract.js","stores/wallet.js","stores/contract.js","helpers/wallet.js","components/Wallet.jsx","components/WorkflowStatus.jsx","components/UserStatus.jsx","pages/RegisteringVoters.jsx","pages/RegisteringProposals.jsx","pages/VotingSession.jsx","components/ResetStatus.jsx","components/NextStatus.jsx","components/VotingSessionId.jsx","pages/ProposalsRegistrationEnded.jsx","pages/NotConnected.jsx","pages/VotingSessionEnded.jsx","pages/VotesTallied.jsx","components/Writer.jsx","stores/app.js","components/Settings.jsx","pages/Main.jsx","helpers/web3.js","App.js","serviceWorker.js","index.js"],"names":["contractInstance","store","create","set","web3","ready","connected","address","isVoter","isOwner","hasVoted","votedProposalId","proposals","setWeb3","connect","state","disconnect","resetVote","addProposals","addProposal","proposal","newProposals","push","workflowStatus","votingSessionId","voters","log","addVoters","addVoter","voter","newVoters","resetContract","loadContract","web3Provider","a","eth","net","getId","networkId","deployedNetwork","votingContract","networks","Contract","abi","getWorkflowStatus","getVotingSessionId","events","allEvents","err","event","console","warn","triggerEvent","subscribeEvent","contractStore","setState","returnValues","newStatus","walletStore","getState","Web3","utils","toChecksumAddress","voterAddress","getProposal","proposalId","description","getPermissions","getVoter","isRegistered","sessionId","methods","owner","call","setVoter","send","from","vote","nextStatus","resetStatus","reset","getVoters","getPastEvents","fromBlock","toBlock","filter","voterEvents","getProposals","addressFrom","proposalsArray","proposalEvent","id","voteCount","getWinner","winner","subscriptions","eventName","callback","undefined","Object","values","evt","storeConnect","getAccounts","accounts","Array","isArray","Wallet","props","handleClick","classes","textButton","substr","onClick","className","join","WorkflowStatus","map","status","key","toString","getWorkflowStatusName","UserStatus","RegisteringVoters","useState","getInput","setInput","getDisabled","setDisabled","useEffect","handleAddVoter","isAddressValid","test","value","onChange","e","target","disabled","length","index","RegisteringProposals","handleAddProposal","trim","VotingSession","setProposals","ResetStatus","NextStatus","VotingSessionId","ProposalsRegistrationEnded","NotConnected","VotingSessionEnded","VotesTallied","intervalIdle","intervalWriting","lastProposal","winningProposal","setWinningProposal","sound","effects","setSound","setEffects","audio","Audio","loop","Writer","content","setContent","appStore","data","clearInterval","window","setInterval","play","pause","currentTime","lastPointer","Settings","effectsEnabled","Cookies","get","soundEnabled","toggle","type","document","getElementsByTagName","classList","add","remove","Main","displayWorkflowStatus","href","accountChanged","Promise","resolve","reject","addEventListener","ethereum","enable","on","provider","providers","HttpProvider","App","then","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.067338e5.chunk.js","sourcesContent":["import votingContract from '../contracts/Voting.json';\nimport contractStore from '../stores/contract';\nimport walletStore from '../stores/wallet';\nimport Web3 from 'web3';\n\nlet contractInstance;\n\n/**\n * Load the contract with our web3 provider\n *\n * @param web3Provider\n * @return {Promise<void>}\n */\nasync function loadContract(web3Provider) {\n    const networkId = await web3Provider.eth.net.getId();\n    const deployedNetwork = votingContract.networks[networkId];\n    contractInstance = new web3Provider.eth.Contract(\n        votingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n    );\n\n    // As we have the contract we can already get the workflow status\n    const workflowStatus = await getWorkflowStatus();\n    const votingSessionId = await getVotingSessionId();\n\n    contractInstance.events.allEvents(\n        {},\n        (err, event) => {\n            if (err) {\n                return console.warn(err);\n            }\n            triggerEvent(event)\n        }\n    );\n\n    subscribeEvent('WorkflowStatusChange', (event) => {\n        contractStore.setState({ workflowStatus: event.returnValues.newStatus, votingSessionId: event.returnValues.votingSessionId });\n        if (event.returnValues.newStatus === '0') {\n            // The voting session has been reset\n            walletStore.getState().resetVote();\n            contractStore.getState().resetContract();\n        }\n    });\n\n    subscribeEvent('*', (event) => {\n        contractStore.setState({log: event.event });\n    });\n\n    subscribeEvent('VoterRegistered', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voterAddress) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ isVoter: true });\n        }\n\n        contractStore.getState().addVoter({\n            address: event.returnValues.voterAddress\n        });\n    });\n\n    subscribeEvent('ProposalRegistered', async (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            const proposal = await getProposal(event.returnValues.proposalId);\n\n            walletStore.getState().addProposal({\n                proposalId: event.returnValues.proposalId,\n                description: proposal.description,\n            });\n        }\n    });\n\n    subscribeEvent('Voted', (event) => {\n        if (Web3.utils.toChecksumAddress(event.returnValues.voter) === Web3.utils.toChecksumAddress(walletStore.getState().address)) {\n            walletStore.setState({ hasVoted: true, votedProposalId: event.returnValues.proposalId });\n        }\n    });\n\n    // Save the state\n    contractStore.setState({ ready: true, workflowStatus, votingSessionId, address: deployedNetwork.address });\n}\n\n/**\n * Get the permissions for an address\n * an store it inside contract store\n *\n * @todo: rename this function as we do more than just getting permissions\n *\n * @param address\n * @return {Promise<*[]>}\n */\nasync function getPermissions(address) {\n    if (!contractInstance) {\n        return;\n    }\n    const voter = await getVoter(address);\n\n    if (voter.isRegistered && voter.sessionId === contractStore.getState().votingSessionId) {\n        walletStore.setState({ isVoter: true, hasVoted: voter.hasVoted, votedProposalId: voter.votedProposalId });\n    }\n\n    const owner = await contractInstance.methods.owner().call();\n\n    if (Web3.utils.toChecksumAddress(owner) === Web3.utils.toChecksumAddress(address)) {\n        walletStore.setState({ isOwner: true });\n    }\n}\n\n/**\n * Get a voter from contract\n *\n * @param address\n * @return {Promise<{hasVoted: boolean, isRegistered: boolean, votedProposalId}>}\n */\nasync function getVoter(address) {\n    const voter = await contractInstance.methods.voters(address).call();\n\n    return (({ isRegistered, hasVoted, votedProposalId, sessionId }) => ({ isRegistered, hasVoted, votedProposalId, sessionId }))(voter);\n}\n\n/**\n * Get the workflow status of the voting session\n *\n * @return {Promise<null|*>}\n */\nasync function getWorkflowStatus() {\n    if (!contractInstance) {\n        return null;\n    }\n    return await contractInstance.methods.workflowStatus().call();\n}\n\n/**\n * Get the voting session identifier\n *\n * @return {Promise<null|*>}\n */\nasync function getVotingSessionId() {\n    if (!contractInstance) {\n        return null;\n    }\n    return await contractInstance.methods.votingSessionId().call();\n}\n\n/**\n * Save a voter on the blockchain\n *\n * @param address\n * @return {Promise<*>}\n */\nasync function setVoter(address) {\n    return await contractInstance.methods.addVoter(address).send({from: walletStore.getState().address});\n}\n\n/**\n * Vote for a proposal\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function vote(proposalId) {\n    return await contractInstance.methods.vote(proposalId).send({from: walletStore.getState().address});\n}\n\n/**\n * Change to the next status\n *\n * @return {Promise<*>}\n */\nasync function nextStatus() {\n    return await contractInstance.methods.nextStatus().send({from: walletStore.getState().address});\n}\n\n/**\n * Add a new proposal\n *\n * @param proposal\n * @return {Promise<*>}\n */\nasync function addProposal(proposal) {\n    return await contractInstance.methods.addProposal(proposal).send({from: walletStore.getState().address});\n}\n\n/**\n * Get a proposal\n *\n * @param proposalId\n * @return {Promise<*>}\n */\nasync function getProposal(proposalId) {\n    return await contractInstance.methods.proposals(proposalId).call();\n}\n\n/**\n * Reset contract\n * @returns {Promise<*>}\n */\nasync function resetStatus() {\n    return await contractInstance.methods.reset().send({from: walletStore.getState().address});\n}\n\n/**\n * Return the human readable text for a workflow status\n *\n * @param workflowStatus\n * @return {string}\n */\nfunction getWorkflowStatusName(workflowStatus) {\n    workflowStatus = workflowStatus.toString();\n    let status;\n\n    switch (workflowStatus) {\n        case '0':\n            status = 'Registering voters'\n            break;\n        case '1':\n            status = 'Proposal registration'\n            break;\n        case '2':\n            status = 'Proposal registration has ended'\n            break;\n        case '3':\n            status = 'Voting session'\n            break;\n        case '4':\n            status = 'Voting session has ended'\n            break;\n        case '5':\n            status = 'Votes tallied'\n            break;\n        default:\n            status = 'Not a valid status'\n    }\n\n    return status;\n}\n\n/**\n * Retrieve all voters for the current session\n *\n * @return {Promise<*[]>}\n */\nasync function getVoters() {\n    const voterEvents = await contractInstance.getPastEvents('VoterRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n        filter: {\n            votingSessionId: contractStore.getState().votingSessionId\n        },\n    });\n\n    const voters = [];\n\n    for (const voter of voterEvents) {\n        voters.push({\n            address: voter.returnValues.voterAddress,\n        });\n    }\n\n    return voters;\n}\n\n/**\n * Retrieve all proposals for the current session\n * Can be filtered an address\n *\n * @param addressFrom\n * @return {Promise<*[]>}\n */\nasync function getProposals(addressFrom = null) {\n    const filter = {\n        votingSessionId:  contractStore.getState().votingSessionId\n    };\n\n    if (addressFrom) {\n        filter.address = addressFrom;\n    }\n\n    const proposals = await contractInstance.getPastEvents('ProposalRegistered', {\n        fromBlock: 0,\n        toBlock: 'latest',\n        filter,\n    });\n\n    const proposalsArray = [];\n\n    for (const proposalEvent of proposals) {\n        const proposal = await getProposal(proposalEvent.returnValues.proposalId);\n        proposalsArray.push({\n            id: proposalEvent.returnValues.proposalId,\n            description: proposal.description,\n            voteCount: proposal.voteCount,\n        });\n    }\n\n    return proposalsArray;\n}\n\n/**\n * Return the winning proposal\n *\n * @return {Promise<{description: *, proposalId: *}>}\n */\nasync function getWinner() {\n    const winner = await contractInstance.methods.getWinner().call();\n\n    return {proposalId: winner.proposalId, description: winner.description, voteCount: winner.voteCount};\n}\n\nconst subscriptions = {};\nfunction subscribeEvent(eventName, callback) {\n    if (subscriptions[eventName] === undefined) {\n        subscriptions[eventName] = [];\n    }\n    subscriptions[eventName].push(callback);\n}\n\nfunction triggerEvent(event) {\n    if (subscriptions[event.event] !== undefined) {\n        for (const evt of Object.values(subscriptions[event.event])) {\n            evt(event);\n        }\n    }\n    if (subscriptions['*'] !== undefined) {\n        for (const evt of Object.values(subscriptions['*'])) {\n            evt(event);\n        }\n    }\n}\n\nexport {\n    loadContract,\n    getWorkflowStatus,\n    getPermissions,\n    getVoters,\n    setVoter,\n    vote,\n    getWorkflowStatusName,\n    nextStatus,\n    addProposal,\n    getProposals,\n    getWinner,\n    resetStatus,\n    subscribeEvent\n};\n","/**\n * We store here all data related to the wallet and web3 connection\n */\nimport create from 'zustand';\n\nconst store = create(set => ({\n    web3: null, // Web3 provider\n    ready: false, // True when web3 provider is ready\n    connected: false,\n    address: null,\n    isVoter: false,\n    isOwner: false,\n    hasVoted: false,\n    votedProposalId: null,\n    proposals: [],\n    setWeb3: (web3) => set({web3}),\n    connect: (address) => set(state => ({ connected: true, address })),\n    disconnect: () => set({ connected: false, address: null, isVoter: false, isOwner: false, hasVoted: false }),\n    resetVote: () => set({ isVoter: false, hasVoted: false }),\n    addProposals: (proposals) => set({ proposals }),\n    addProposal: (proposal) => set(state => {\n        const newProposals = [...state.proposals];\n        newProposals.push(proposal);\n        return {proposals: newProposals}\n    }),\n}));\n\nexport default store;\n","/**\n * We store here all the data related to the contract\n * Events, current state, ...\n */\nimport create from 'zustand';\n\nconst store = create(set => ({\n    ready: false,\n    address: null,\n    workflowStatus: null,\n    votingSessionId: null,\n    voters: [],\n    log: null,\n    addVoters: (voters) => set({ voters }),\n    addVoter: (voter) => set(state => {\n        const newVoters = [...state.voters];\n        newVoters.push(voter);\n        return {voters: newVoters}\n    }),\n    resetContract: () => set({ voters: [] }),\n}));\n\nexport default store;\n","import {getPermissions} from \"./contract\";\nimport walletStore from \"../stores/wallet\";\n\nasync function connect() {\n    const storeConnect = walletStore.getState().connect;\n    const web3 = walletStore.getState().web3;\n\n    const accounts = await web3.eth.getAccounts();\n\n    if (Array.isArray(accounts) && accounts[0]) {\n        storeConnect(accounts[0]);\n        await getPermissions(accounts[0]);\n        return true;\n    }\n\n    return false;\n}\n\nfunction disconnect() {\n    walletStore.getState().disconnect();\n}\n\nexport {connect, disconnect}\n","import React from 'react';\nimport walletStore from '../stores/wallet';\nimport {connect, disconnect} from \"../helpers/wallet\";\n\nfunction Wallet(props) {\n    // Load the data from store\n    const { ready, connected, address } = walletStore(state => ({web3: state.web3, ready: state.ready, connected: state.connected, address: state.address}));\n\n    const handleClick = async () => {\n        if (!ready) {\n            // Web3 must be ready before any interaction\n            return;\n        }\n\n        if (!connected) {\n            await connect();\n        } else {\n            // We want to disconnect the current account\n            await disconnect();\n        }\n    }\n\n    const classes = ['btn-wallet', 'btn'];\n    let textButton = 'Loading';\n    if (ready && !connected) {\n        textButton = 'Connect'\n    } else if (connected) {\n        textButton = address.substr(0, 6) + '....' + address.substr(-4);\n        classes.push('btn-wallet-connected');\n    }\n\n    return (\n        <button id=\"wallet\" onClick={handleClick}  className={classes.join(' ')}>\n            {textButton}\n        </button>\n    );\n}\n\nexport default Wallet;\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {getWorkflowStatusName} from \"../helpers/contract\";\n\nfunction WorkflowStatus(props) {\n\n    const {ready, workflowStatus} = contractStore(state => ({ready: state.ready, workflowStatus: state.workflowStatus}));\n\n    if (!ready) {\n        // Status not yet initialized\n        return <></>;\n    }\n\n    return (\n        <div>\n            <h3>Current status :</h3>\n            {[0,1,2,3,4,5].map((status)=>{\n                return (\n                    <div key={status}>\n                        [{workflowStatus === status.toString() ? 'x' : ' '}] {getWorkflowStatusName(status)}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nexport default WorkflowStatus;\n","import React from 'react';\nimport walletStore from \"../stores/wallet\";\n\nfunction UserStatus() {\n\n    const {isVoter, isOwner} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner }));\n\n    return (\n        <div>\n            <h3>Your permissions :</h3>\n            <div>Owner: {isOwner ? '[✓]' : '[ ]'}</div>\n\n            <div>Voter: {isVoter ? '[✓]' : '[ ]'}</div>\n        </div>\n    );\n}\n\nexport default UserStatus;\n","import React, {useEffect, useState} from 'react';\nimport {setVoter, getVoters} from \"../helpers/contract\";\nimport contractStore from \"../stores/contract\";\n\nfunction RegisteringVoters() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n\n    const {voters} = contractStore(state => ({ voters: state.voters }));\n    const addVoters = contractStore.getState().addVoters;\n\n    useEffect(() => {\n        (async () => {\n            addVoters(await getVoters());\n        })();\n    }, []);\n\n    const handleAddVoter = async () => {\n        await setVoter(getInput);\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setDisabled(!isAddressValid(e.target.value));\n        setInput(e.target.value);\n    }\n\n    const isAddressValid = (address) => {\n        if (typeof address !== 'string') {\n            return false;\n        }\n\n        return /^0x[a-fA-F0-9]{40}$/.test(address);\n    }\n\n    return (\n        <>\n            Add a voter : <br/>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange} />\n            <button disabled={getDisabled} onClick={handleAddVoter}>Add voter</button>\n\n            {voters.length >0 &&\n                <>\n                    <h3>Voters whitelist</h3>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Address</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {voters.map((voter, index) =>\n                            <tr key={index}>\n                                <td>{index}</td>\n                                <td>{voter.address}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </>\n            }\n\n            {voters.length === 0 && <div>You don't have any voter registered yet</div>}\n        </>\n    )\n}\n\nexport default RegisteringVoters;\n\n","import React, {useEffect, useState} from 'react';\nimport {addProposal, getProposals} from \"../helpers/contract\";\nimport walletStore from \"../stores/wallet\";\n\nfunction RegisteringProposals() {\n    const [getInput, setInput] = useState('');\n    const [getDisabled, setDisabled] = useState(true);\n\n    const {address, proposals} = walletStore(state => ({ address: state.address, proposals: state.proposals }));\n    const addProposals = walletStore.getState().addProposals;\n\n    useEffect(() => {\n        (async () => {\n            addProposals(await getProposals(address));\n        })();\n    }, []);\n\n    const handleAddProposal = async () => {\n        await addProposal(getInput.trim());\n        setInput('');\n    }\n\n    const handleInputChange = (e) => {\n        setInput(e.target.value);\n        setDisabled(e.target.value.trim() === '');\n    }\n\n    return (\n        <>\n            <input className=\"input-address\" value={getInput} onChange={handleInputChange}/>\n            <button disabled={getDisabled} onClick={handleAddProposal}>Add proposal</button>\n\n            {proposals.length > 0 &&\n                <>\n                    <h3>Your proposals</h3>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Proposal</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {proposals.map((proposal, index) =>\n                            <tr key={index}>\n                                <td>{index}</td>\n                                <td>{proposal.description}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                </>\n            }\n\n            {proposals.length === 0 && <div>You don't have any proposal registered yet</div>}\n        </>\n    )\n}\n\nexport default RegisteringProposals;\n\n","import React, {useEffect, useState} from 'react';\nimport {getProposals, vote} from \"../helpers/contract\";\nimport walletStore from \"../stores/wallet\";\n\nfunction VotingSession() {\n    const [proposals, setProposals] = useState([]);\n\n    const {hasVoted, votedProposalId} = walletStore(state => ({ hasVoted: state.hasVoted, votedProposalId: state.votedProposalId }));\n\n    useEffect(() => {\n        (async () => {\n            setProposals(await getProposals());\n        })();\n    }, []);\n\n    const handleClick = async (proposalId) => {\n        await vote(proposalId);\n    }\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Proposition</th>\n                    <th>Vote</th>\n                </tr>\n            </thead>\n            <tbody>\n            {proposals.map((proposal) =>\n                <tr key={proposal.id}>\n                    <td><span className=\"proposal-id\">{proposal.id}</span></td>\n                    <td>{proposal.description}</td>\n                    <td>\n                        {(hasVoted && votedProposalId === proposal.id) && '[x]'}\n                        {(hasVoted && votedProposalId !== proposal.id) && '[ ]'}\n                        {!hasVoted && <button onClick={() => handleClick(proposal.id)}>Vote</button>}\n                    </td>\n                </tr>\n            )}\n            </tbody>\n        </table>\n    )\n}\n\nexport default VotingSession;\n\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {resetStatus} from \"../helpers/contract\";\n\nfunction ResetStatus() {\n    const handleClick = async () => {\n        await resetStatus();\n    }\n\n    return (\n        <button className=\"btn-status btn-reset\" onClick={handleClick}>\n            Reset contract\n        </button>\n    );\n}\n\nexport default ResetStatus;\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {getWorkflowStatusName, nextStatus} from \"../helpers/contract\";\n\nfunction NextStatus() {\n\n    const handleClick = async () => {\n        await nextStatus();\n    }\n\n    return (\n        <button className=\"btn-status\" onClick={handleClick}>\n            Next Status\n        </button>\n    );\n}\n\nexport default NextStatus;\n","import React from 'react';\nimport contractStore from \"../stores/contract\";\nimport {getWorkflowStatusName} from \"../helpers/contract\";\n\nfunction VotingSessionId(props) {\n\n    const {ready, votingSessionId} = contractStore(state => ({ready: state.ready, votingSessionId: state.votingSessionId}));\n\n    if (!ready) {\n        // Status not yet initialized\n        return <></>;\n    }\n\n    return (\n        <div>\n            Voting Session number {votingSessionId}\n        </div>\n    );\n}\n\nexport default VotingSessionId;\n","import React, {useState} from 'react';\nimport {addProposal} from \"../helpers/contract\";\n\nfunction ProposalsRegistrationEnded() {\n\n\n    return (\n        <>\n            Proposal registration is finished.<br/>\n            Vote will be available soon.\n        </>\n    )\n}\n\nexport default ProposalsRegistrationEnded;\n\n","import React from 'react';\n\nfunction NotConnected() {\n\n    return (\n        <>\n            Please connect your wallet\n        </>\n    )\n}\n\nexport default NotConnected;\n\n","import React, {useEffect, useState} from 'react';\nimport {addProposal, getProposals, vote} from \"../helpers/contract\";\n\nfunction VotingSessionEnded() {\n\n    return (\n        <>\n            Voting session has ended.<br/>\n            Thank you for your participation.<br/><br/>\n        </>\n    )\n}\n\nexport default VotingSessionEnded;\n\n","import React, {useEffect, useState} from 'react';\nimport {addProposal, getProposals, getWinner, vote} from \"../helpers/contract\";\n\nfunction VotesTallied() {\n    const [winningProposal, setWinningProposal] = useState(null);\n\n    useEffect(() => {\n        (async () => {\n            setWinningProposal(await getWinner());\n        })();\n    }, []);\n\n    if (winningProposal === null) {\n        return <></>;\n    }\n\n    return (\n        <>\n            ID: {winningProposal.proposalId}<br/>\n            Description {winningProposal.description}\n        </>\n    )\n}\n\nexport default VotesTallied;\n\n","import React, {useEffect, useState} from 'react';\nimport contractStore from \"../stores/contract\";\nimport appStore from \"../stores/app\";\n\nlet intervalIdle;\nlet intervalWriting\nlet lastProposal;\nconst audio = new Audio('sound.mp3');\naudio.loop = true;\n\nfunction Writer(props) {\n    const [content, setContent] = useState(null);\n\n    const {sound} = appStore(state => ({ sound: state.sound }));\n\n\n    useEffect(() => {\n        if (props.data === '' || props.data === null) {\n            return;\n        }\n\n        const intervalWritingTiming = 70;\n        const intervalIdleTiming = 600;\n        const pointer = '▓';\n        let index = 0;\n\n        clearInterval(intervalWriting);\n        clearInterval(intervalIdle);\n        intervalWriting = window.setInterval(() => {\n            if(sound) {\n                audio.play();\n            }\n            setContent(props.data.substr(0, index) + pointer);\n\n            if (index === props.data.length) {\n                lastProposal = props.data;\n                audio.pause();\n                audio.currentTime = 0;\n                contractStore.setState({log: null });\n                window.clearInterval(intervalWriting);\n                let lastPointer = '';\n                intervalIdle = window.setInterval(() => {\n                    if (lastPointer === '') {\n                        lastPointer = pointer;\n                    } else {\n                        lastPointer = '';\n                    }\n                    setContent(lastProposal + lastPointer);\n                }, intervalIdleTiming);\n            }\n            index++;\n        }, intervalWritingTiming);\n\n    }, [props.data]);\n\n    if (content === null) {\n        return (<></>);\n    }\n\n    return (\n        <>\n            {content}\n        </>\n    );\n}\n\nexport default Writer;\n","/**\n * We store here all data related to the wallet and web3 connection\n */\nimport create from 'zustand';\n\nconst store = create(set => ({\n    sound: true,\n    effects: true,\n    setSound: (sound) => set({sound}),\n    setEffects: (effects) => set({effects}),\n}));\n\nexport default store;\n","import React, {useEffect} from 'react';\nimport appStore from '../stores/app.js';\nimport Cookies from 'js-cookie';\n\n/**\n * Enable or disable visual effect\n *\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Settings() {\n    const {sound, effects} = appStore(state => ({ sound: state.sound, effects: state.effects}));\n    const {setSound, setEffects} = appStore(state => ({ setSound: state.setSound, setEffects: state.setEffects}));\n\n    useEffect(() => {\n        // fixme: This part should not be done here, but on top of the application\n        const effectsEnabled = Cookies.get('no-effects') === undefined;\n        const soundEnabled = Cookies.get('no-sound') === undefined;\n        toggle('effects', effectsEnabled);\n        setEffects(effectsEnabled);\n        toggle('sound', soundEnabled);\n        setSound(soundEnabled);\n    }, []);\n\n    const toggle = (type, value) => {\n        if (type === 'effects') {\n            if (value) {\n                document.getElementsByTagName('body')[0].classList.add('animated');\n            } else {\n                document.getElementsByTagName('body')[0].classList.remove('animated');\n            }\n            setEffects(value);\n        } else if (type === 'sound') {\n            setSound(value);\n        }\n\n        if (value) {\n            Cookies.remove('no-' + type);\n        } else {\n            Cookies.set('no-' + type, '1')\n        }\n\n    }\n\n    return (\n        <div id=\"settings\">\n            <h3>Settings</h3>\n            <a onClick={() => toggle('effects', !effects)} className=\"setting-btn\">Visual effect <span>{effects ? '[x]' : '[ ]'}</span></a>\n            <a onClick={() => toggle('sound', !sound)} className=\"setting-btn\">Sound <span>{sound ? '[x]' : '[ ]'}</span></a>\n        </div>\n    );\n}\n\nexport default Settings;\n","import React from 'react';\nimport Wallet from \"../components/Wallet\";\nimport WorkflowStatus from \"../components/WorkflowStatus\";\nimport UserStatus from \"../components/UserStatus\";\nimport walletStore from \"../stores/wallet\";\nimport contractStore from \"../stores/contract\";\nimport RegisteringVoters from \"./RegisteringVoters\";\nimport RegisteringProposals from \"./RegisteringProposals\";\nimport VotingSession from \"./VotingSession\";\nimport ResetStatus from \"../components/ResetStatus\";\nimport NextStatus from \"../components/NextStatus\";\nimport VotingSessionId from \"../components/VotingSessionId\";\nimport ProposalsRegistrationEnded from \"./ProposalsRegistrationEnded\";\nimport NotConnected from \"./NotConnected\";\nimport VotingSessionEnded from \"./VotingSessionEnded\";\nimport VotesTallied from \"./VotesTallied\";\nimport Writer from \"../components/Writer\";\nimport Settings from \"../components/Settings\";\n\nfunction Main() {\n    const {isVoter, isOwner, connected} = walletStore(state => ({ isVoter: state.isVoter, isOwner: state.isOwner, connected: state.connected }));\n    const {workflowStatus, address, log} = contractStore(state => ({ workflowStatus: state.workflowStatus, address: state.address, log: state.log}));\n\n\n    let displayWorkflowStatus = false, displayNextStatus = false, displayResetStatus = false, displayPermissions = false;\n    if (isOwner || isVoter) {\n        displayWorkflowStatus = isOwner || isVoter;\n    }\n\n    return (\n        <>\n            <div id=\"header\">\n                <div>\n                    <VotingSessionId />\n                    <Writer data={log} />\n                </div>\n                <div className=\"side-right\">\n                    <Wallet />\n                </div>\n\n            </div>\n\n            <div id=\"main\">\n                {connected &&\n                    <div id=\"sidebars\">\n                        <div className=\"sidebar\">\n                            {displayWorkflowStatus && <WorkflowStatus/>}\n                            {(isOwner && workflowStatus !== '5') && <NextStatus/>}\n                            {(isOwner && workflowStatus === '5') && <ResetStatus/>}\n                        </div>\n                        <div className=\"sidebar\">\n                            <UserStatus/>\n                        </div>\n                        <div className=\"sidebar\">\n                            <Settings />\n                        </div>\n                    </div>\n                }\n                <div id=\"content\">\n                    {!connected && <NotConnected /> }\n                    {(isOwner && workflowStatus === '0') && <RegisteringVoters /> }\n                    {(isVoter && workflowStatus === '1') && <RegisteringProposals /> }\n                    {(isVoter && workflowStatus === '2') && <ProposalsRegistrationEnded /> }\n                    {(isVoter && workflowStatus === '3') && <VotingSession /> }\n                    {(isVoter && workflowStatus === '4') && <VotingSessionEnded /> }\n                    {(isVoter && workflowStatus === '5') && <VotesTallied /> }\n                </div>\n\n            </div>\n            <div id=\"footer\"><a target=\"_blank\" href={'https://ropsten.etherscan.io/address/' + address}>Contract address : {address}</a></div>\n        </>\n    )\n}\n\nexport default Main;\n","import Web3 from \"web3\";\n\nconst web3 = (accountChanged = () => {}) =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n\n          window.ethereum.on('accountsChanged', accountChanged)\n\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default web3;\n","import React, {useEffect} from 'react';\nimport Main from './pages/Main'\nimport web3 from \"./helpers/web3\";\nimport {loadContract} from \"./helpers/contract\";\nimport walletStore from \"./stores/wallet\";\nimport './assets/css/normalize.css';\nimport './assets/css/app.css';\nimport {connect, disconnect} from \"./helpers/wallet\";\n\nfunction App() {\n  useEffect(() => {\n    web3(async () => {\n      await disconnect();\n      await connect();\n    }).then(async (web3Provider) => {\n      walletStore.setState({ web3: web3Provider, ready: true });\n\n      // Load the contract\n      await loadContract(web3Provider);\n\n      await connect();\n    });\n  }, []);\n\n  return <Main />;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}